package server

import (
	"fmt"
	"log"
	"math/rand"
	"sort"
	"szechuansage/slotgame"
)

var config slotgame.Config

var reels int
var reelSet [][]string

var report slotgame.Report

var indexes []int
var loopTo []int
var endOfSequence bool

var symbolView []map[string]int

var bonsaiOverlay [5][3]int

func hasNextSequence() bool {
	return !endOfSequence
}

func isNextSequence() bool {
	for i := reels - 1; i >= 0; i-- {
		if indexes[i] != loopTo[i]-1 {
			return true
		}
	}
	return false
}

func atEndOfLoop(index int) bool {
	return (indexes[index]+1 >= loopTo[index])
}

func advanceSequence() {
	for i := reels - 1; i >= 0; i-- {
		if atEndOfLoop(i) {
			indexes[i] = 0
		} else {
			indexes[i]++
			return
		}
	}
}

func setNextReelView(reelSetName string) []map[string]int {
	if !isNextSequence() {
		endOfSequence = true
	}
	_, symbolView := config.GetReelView(indexes, reelSetName)
	if !endOfSequence {
		advanceSequence()
	}
	return symbolView
}

func setRandomReelView(reelSetName string) []map[string]int {
	for x, y := range loopTo {
		indexes[x] = rand.Intn(y)
	}
	_, symbolView := config.GetReelView(indexes, reelSetName)
	return symbolView
}

func setBonsaiReelView(reelSetName string) []map[string]int {
	for x, y := range loopTo {
		indexes[x] = rand.Intn(y)
	}
	fmt.Println("setBonsaiReelView")
	fmt.Println("bonsai-1")
	fmt.Println(bonsaiOverlay)
	// get reel view
	symbolView, symbolCount := config.GetReelView(indexes, reelSetName)
	fmt.Println("symbol-1")
	fmt.Println(symbolView)
	fmt.Println(symbolCount)
	// upgrade bonsai and reel display
	for rx, rv := range symbolView {
		symbolCount[rx] = make(map[string]int)
		for sx, sv := range rv {
			if sv == "X" && bonsaiOverlay[rx][sx] < 3 {
				bonsaiOverlay[rx][sx] += 1
			}
			if (bonsaiOverlay[rx][sx] > 0) {
				symbolView[rx][sx] = "X"
			}
			symbolCount[rx][symbolView[rx][sx]]++
		}
	}
	fmt.Println("bonsai-2")
	fmt.Println(bonsaiOverlay)
	fmt.Println("symbol-2")
	fmt.Println(symbolView)
	fmt.Println(symbolCount)
	return symbolCount
}

func weightedDraw() []int {
	reels := [][]int{{0, 0, 0, 3, 3}, {0, 0, 1, 2, 3}, {0, 0, 1, 3, 2}, {0, 0, 2, 1, 3}, {0, 0, 2, 2, 2}, {0, 0, 2, 3, 1}, {0, 0, 3, 0, 3}, {0, 0, 3, 1, 2}, {0, 0, 3, 2, 1}, {0, 0, 3, 3, 0}, {0, 1, 0, 2, 3}, {0, 1, 0, 3, 2}, {0, 1, 1, 1, 3}, {0, 1, 1, 2, 2}, {0, 1, 1, 3, 1}, {0, 1, 2, 0, 3}, {0, 1, 2, 1, 2}, {0, 1, 2, 2, 1}, {0, 1, 2, 3, 0}, {0, 1, 3, 0, 2}, {0, 1, 3, 1, 1}, {0, 1, 3, 2, 0}, {0, 2, 0, 1, 3}, {0, 2, 0, 2, 2}, {0, 2, 0, 3, 1}, {0, 2, 1, 0, 3}, {0, 2, 1, 1, 2}, {0, 2, 1, 2, 1}, {0, 2, 1, 3, 0}, {0, 2, 2, 0, 2}, {0, 2, 2, 1, 1}, {0, 2, 2, 2, 0}, {0, 2, 3, 0, 1}, {0, 2, 3, 1, 0}, {0, 3, 0, 0, 3}, {0, 3, 0, 1, 2}, {0, 3, 0, 2, 1}, {0, 3, 0, 3, 0}, {0, 3, 1, 0, 2}, {0, 3, 1, 1, 1}, {0, 3, 1, 2, 0}, {0, 3, 2, 0, 1}, {0, 3, 2, 1, 0}, {0, 3, 3, 0, 0}, {1, 0, 0, 2, 3}, {1, 0, 0, 3, 2}, {1, 0, 1, 1, 3}, {1, 0, 1, 2, 2}, {1, 0, 1, 3, 1}, {1, 0, 2, 0, 3}, {1, 0, 2, 1, 2}, {1, 0, 2, 2, 1}, {1, 0, 2, 3, 0}, {1, 0, 3, 0, 2}, {1, 0, 3, 1, 1}, {1, 0, 3, 2, 0}, {1, 1, 0, 1, 3}, {1, 1, 0, 2, 2}, {1, 1, 0, 3, 1}, {1, 1, 1, 0, 3}, {1, 1, 1, 1, 2}, {1, 1, 1, 2, 1}, {1, 1, 1, 3, 0}, {1, 1, 2, 0, 2}, {1, 1, 2, 1, 1}, {1, 1, 2, 2, 0}, {1, 1, 3, 0, 1}, {1, 1, 3, 1, 0}, {1, 2, 0, 0, 3}, {1, 2, 0, 1, 2}, {1, 2, 0, 2, 1}, {1, 2, 0, 3, 0}, {1, 2, 1, 0, 2}, {1, 2, 1, 1, 1}, {1, 2, 1, 2, 0}, {1, 2, 2, 0, 1}, {1, 2, 2, 1, 0}, {1, 2, 3, 0, 0}, {1, 3, 0, 0, 2}, {1, 3, 0, 1, 1}, {1, 3, 0, 2, 0}, {1, 3, 1, 0, 1}, {1, 3, 1, 1, 0}, {1, 3, 2, 0, 0}, {2, 0, 0, 1, 3}, {2, 0, 0, 2, 2}, {2, 0, 0, 3, 1}, {2, 0, 1, 0, 3}, {2, 0, 1, 1, 2}, {2, 0, 1, 2, 1}, {2, 0, 1, 3, 0}, {2, 0, 2, 0, 2}, {2, 0, 2, 1, 1}, {2, 0, 2, 2, 0}, {2, 0, 3, 0, 1}, {2, 0, 3, 1, 0}, {2, 1, 0, 0, 3}, {2, 1, 0, 1, 2}, {2, 1, 0, 2, 1}, {2, 1, 0, 3, 0}, {2, 1, 1, 0, 2}, {2, 1, 1, 1, 1}, {2, 1, 1, 2, 0}, {2, 1, 2, 0, 1}, {2, 1, 2, 1, 0}, {2, 1, 3, 0, 0}, {2, 2, 0, 0, 2}, {2, 2, 0, 1, 1}, {2, 2, 0, 2, 0}, {2, 2, 1, 0, 1}, {2, 2, 1, 1, 0}, {2, 2, 2, 0, 0}, {2, 3, 0, 0, 1}, {2, 3, 0, 1, 0}, {2, 3, 1, 0, 0}, {3, 0, 0, 0, 3}, {3, 0, 0, 1, 2}, {3, 0, 0, 2, 1}, {3, 0, 0, 3, 0}, {3, 0, 1, 0, 2}, {3, 0, 1, 1, 1}, {3, 0, 1, 2, 0}, {3, 0, 2, 0, 1}, {3, 0, 2, 1, 0}, {3, 0, 3, 0, 0}, {3, 1, 0, 0, 2}, {3, 1, 0, 1, 1}, {3, 1, 0, 2, 0}, {3, 1, 1, 0, 1}, {3, 1, 1, 1, 0}, {3, 1, 2, 0, 0}, {3, 2, 0, 0, 1}, {3, 2, 0, 1, 0}, {3, 2, 1, 0, 0}, {3, 3, 0, 0, 0}, {0, 0, 1, 3, 3}, {0, 0, 2, 2, 3}, {0, 0, 2, 3, 2}, {0, 0, 3, 1, 3}, {0, 0, 3, 2, 2}, {0, 0, 3, 3, 1}, {0, 1, 0, 3, 3}, {0, 1, 1, 2, 3}, {0, 1, 1, 3, 2}, {0, 1, 2, 1, 3}, {0, 1, 2, 2, 2}, {0, 1, 2, 3, 1}, {0, 1, 3, 0, 3}, {0, 1, 3, 1, 2}, {0, 1, 3, 2, 1}, {0, 1, 3, 3, 0}, {0, 2, 0, 2, 3}, {0, 2, 0, 3, 2}, {0, 2, 1, 1, 3}, {0, 2, 1, 2, 2}, {0, 2, 1, 3, 1}, {0, 2, 2, 0, 3}, {0, 2, 2, 1, 2}, {0, 2, 2, 2, 1}, {0, 2, 2, 3, 0}, {0, 2, 3, 0, 2}, {0, 2, 3, 1, 1}, {0, 2, 3, 2, 0}, {0, 3, 0, 1, 3}, {0, 3, 0, 2, 2}, {0, 3, 0, 3, 1}, {0, 3, 1, 0, 3}, {0, 3, 1, 1, 2}, {0, 3, 1, 2, 1}, {0, 3, 1, 3, 0}, {0, 3, 2, 0, 2}, {0, 3, 2, 1, 1}, {0, 3, 2, 2, 0}, {0, 3, 3, 0, 1}, {0, 3, 3, 1, 0}, {1, 0, 0, 3, 3}, {1, 0, 1, 2, 3}, {1, 0, 1, 3, 2}, {1, 0, 2, 1, 3}, {1, 0, 2, 2, 2}, {1, 0, 2, 3, 1}, {1, 0, 3, 0, 3}, {1, 0, 3, 1, 2}, {1, 0, 3, 2, 1}, {1, 0, 3, 3, 0}, {1, 1, 0, 2, 3}, {1, 1, 0, 3, 2}, {1, 1, 1, 1, 3}, {1, 1, 1, 2, 2}, {1, 1, 1, 3, 1}, {1, 1, 2, 0, 3}, {1, 1, 2, 1, 2}, {1, 1, 2, 2, 1}, {1, 1, 2, 3, 0}, {1, 1, 3, 0, 2}, {1, 1, 3, 1, 1}, {1, 1, 3, 2, 0}, {1, 2, 0, 1, 3}, {1, 2, 0, 2, 2}, {1, 2, 0, 3, 1}, {1, 2, 1, 0, 3}, {1, 2, 1, 1, 2}, {1, 2, 1, 2, 1}, {1, 2, 1, 3, 0}, {1, 2, 2, 0, 2}, {1, 2, 2, 1, 1}, {1, 2, 2, 2, 0}, {1, 2, 3, 0, 1}, {1, 2, 3, 1, 0}, {1, 3, 0, 0, 3}, {1, 3, 0, 1, 2}, {1, 3, 0, 2, 1}, {1, 3, 0, 3, 0}, {1, 3, 1, 0, 2}, {1, 3, 1, 1, 1}, {1, 3, 1, 2, 0}, {1, 3, 2, 0, 1}, {1, 3, 2, 1, 0}, {1, 3, 3, 0, 0}, {2, 0, 0, 2, 3}, {2, 0, 0, 3, 2}, {2, 0, 1, 1, 3}, {2, 0, 1, 2, 2}, {2, 0, 1, 3, 1}, {2, 0, 2, 0, 3}, {2, 0, 2, 1, 2}, {2, 0, 2, 2, 1}, {2, 0, 2, 3, 0}, {2, 0, 3, 0, 2}, {2, 0, 3, 1, 1}, {2, 0, 3, 2, 0}, {2, 1, 0, 1, 3}, {2, 1, 0, 2, 2}, {2, 1, 0, 3, 1}, {2, 1, 1, 0, 3}, {2, 1, 1, 1, 2}, {2, 1, 1, 2, 1}, {2, 1, 1, 3, 0}, {2, 1, 2, 0, 2}, {2, 1, 2, 1, 1}, {2, 1, 2, 2, 0}, {2, 1, 3, 0, 1}, {2, 1, 3, 1, 0}, {2, 2, 0, 0, 3}, {2, 2, 0, 1, 2}, {2, 2, 0, 2, 1}, {2, 2, 0, 3, 0}, {2, 2, 1, 0, 2}, {2, 2, 1, 1, 1}, {2, 2, 1, 2, 0}, {2, 2, 2, 0, 1}, {2, 2, 2, 1, 0}, {2, 2, 3, 0, 0}, {2, 3, 0, 0, 2}, {2, 3, 0, 1, 1}, {2, 3, 0, 2, 0}, {2, 3, 1, 0, 1}, {2, 3, 1, 1, 0}, {2, 3, 2, 0, 0}, {3, 0, 0, 1, 3}, {3, 0, 0, 2, 2}, {3, 0, 0, 3, 1}, {3, 0, 1, 0, 3}, {3, 0, 1, 1, 2}, {3, 0, 1, 2, 1}, {3, 0, 1, 3, 0}, {3, 0, 2, 0, 2}, {3, 0, 2, 1, 1}, {3, 0, 2, 2, 0}, {3, 0, 3, 0, 1}, {3, 0, 3, 1, 0}, {3, 1, 0, 0, 3}, {3, 1, 0, 1, 2}, {3, 1, 0, 2, 1}, {3, 1, 0, 3, 0}, {3, 1, 1, 0, 2}, {3, 1, 1, 1, 1}, {3, 1, 1, 2, 0}, {3, 1, 2, 0, 1}, {3, 1, 2, 1, 0}, {3, 1, 3, 0, 0}, {3, 2, 0, 0, 2}, {3, 2, 0, 1, 1}, {3, 2, 0, 2, 0}, {3, 2, 1, 0, 1}, {3, 2, 1, 1, 0}, {3, 2, 2, 0, 0}, {3, 3, 0, 0, 1}, {3, 3, 0, 1, 0}, {3, 3, 1, 0, 0}, {0, 0, 2, 3, 3}, {0, 0, 3, 2, 3}, {0, 0, 3, 3, 2}, {0, 1, 1, 3, 3}, {0, 1, 2, 2, 3}, {0, 1, 2, 3, 2}, {0, 1, 3, 1, 3}, {0, 1, 3, 2, 2}, {0, 1, 3, 3, 1}, {0, 2, 0, 3, 3}, {0, 2, 1, 2, 3}, {0, 2, 1, 3, 2}, {0, 2, 2, 1, 3}, {0, 2, 2, 2, 2}, {0, 2, 2, 3, 1}, {0, 2, 3, 0, 3}, {0, 2, 3, 1, 2}, {0, 2, 3, 2, 1}, {0, 2, 3, 3, 0}, {0, 3, 0, 2, 3}, {0, 3, 0, 3, 2}, {0, 3, 1, 1, 3}, {0, 3, 1, 2, 2}, {0, 3, 1, 3, 1}, {0, 3, 2, 0, 3}, {0, 3, 2, 1, 2}, {0, 3, 2, 2, 1}, {0, 3, 2, 3, 0}, {0, 3, 3, 0, 2}, {0, 3, 3, 1, 1}, {0, 3, 3, 2, 0}, {1, 0, 1, 3, 3}, {1, 0, 2, 2, 3}, {1, 0, 2, 3, 2}, {1, 0, 3, 1, 3}, {1, 0, 3, 2, 2}, {1, 0, 3, 3, 1}, {1, 1, 0, 3, 3}, {1, 1, 1, 2, 3}, {1, 1, 1, 3, 2}, {1, 1, 2, 1, 3}, {1, 1, 2, 2, 2}, {1, 1, 2, 3, 1}, {1, 1, 3, 0, 3}, {1, 1, 3, 1, 2}, {1, 1, 3, 2, 1}, {1, 1, 3, 3, 0}, {1, 2, 0, 2, 3}, {1, 2, 0, 3, 2}, {1, 2, 1, 1, 3}, {1, 2, 1, 2, 2}, {1, 2, 1, 3, 1}, {1, 2, 2, 0, 3}, {1, 2, 2, 1, 2}, {1, 2, 2, 2, 1}, {1, 2, 2, 3, 0}, {1, 2, 3, 0, 2}, {1, 2, 3, 1, 1}, {1, 2, 3, 2, 0}, {1, 3, 0, 1, 3}, {1, 3, 0, 2, 2}, {1, 3, 0, 3, 1}, {1, 3, 1, 0, 3}, {1, 3, 1, 1, 2}, {1, 3, 1, 2, 1}, {1, 3, 1, 3, 0}, {1, 3, 2, 0, 2}, {1, 3, 2, 1, 1}, {1, 3, 2, 2, 0}, {1, 3, 3, 0, 1}, {1, 3, 3, 1, 0}, {2, 0, 0, 3, 3}, {2, 0, 1, 2, 3}, {2, 0, 1, 3, 2}, {2, 0, 2, 1, 3}, {2, 0, 2, 2, 2}, {2, 0, 2, 3, 1}, {2, 0, 3, 0, 3}, {2, 0, 3, 1, 2}, {2, 0, 3, 2, 1}, {2, 0, 3, 3, 0}, {2, 1, 0, 2, 3}, {2, 1, 0, 3, 2}, {2, 1, 1, 1, 3}, {2, 1, 1, 2, 2}, {2, 1, 1, 3, 1}, {2, 1, 2, 0, 3}, {2, 1, 2, 1, 2}, {2, 1, 2, 2, 1}, {2, 1, 2, 3, 0}, {2, 1, 3, 0, 2}, {2, 1, 3, 1, 1}, {2, 1, 3, 2, 0}, {2, 2, 0, 1, 3}, {2, 2, 0, 2, 2}, {2, 2, 0, 3, 1}, {2, 2, 1, 0, 3}, {2, 2, 1, 1, 2}, {2, 2, 1, 2, 1}, {2, 2, 1, 3, 0}, {2, 2, 2, 0, 2}, {2, 2, 2, 1, 1}, {2, 2, 2, 2, 0}, {2, 2, 3, 0, 1}, {2, 2, 3, 1, 0}, {2, 3, 0, 0, 3}, {2, 3, 0, 1, 2}, {2, 3, 0, 2, 1}, {2, 3, 0, 3, 0}, {2, 3, 1, 0, 2}, {2, 3, 1, 1, 1}, {2, 3, 1, 2, 0}, {2, 3, 2, 0, 1}, {2, 3, 2, 1, 0}, {2, 3, 3, 0, 0}, {3, 0, 0, 2, 3}, {3, 0, 0, 3, 2}, {3, 0, 1, 1, 3}, {3, 0, 1, 2, 2}, {3, 0, 1, 3, 1}, {3, 0, 2, 0, 3}, {3, 0, 2, 1, 2}, {3, 0, 2, 2, 1}, {3, 0, 2, 3, 0}, {3, 0, 3, 0, 2}, {3, 0, 3, 1, 1}, {3, 0, 3, 2, 0}, {3, 1, 0, 1, 3}, {3, 1, 0, 2, 2}, {3, 1, 0, 3, 1}, {3, 1, 1, 0, 3}, {3, 1, 1, 1, 2}, {3, 1, 1, 2, 1}, {3, 1, 1, 3, 0}, {3, 1, 2, 0, 2}, {3, 1, 2, 1, 1}, {3, 1, 2, 2, 0}, {3, 1, 3, 0, 1}, {3, 1, 3, 1, 0}, {3, 2, 0, 0, 3}, {3, 2, 0, 1, 2}, {3, 2, 0, 2, 1}, {3, 2, 0, 3, 0}, {3, 2, 1, 0, 2}, {3, 2, 1, 1, 1}, {3, 2, 1, 2, 0}, {3, 2, 2, 0, 1}, {3, 2, 2, 1, 0}, {3, 2, 3, 0, 0}, {3, 3, 0, 0, 2}, {3, 3, 0, 1, 1}, {3, 3, 0, 2, 0}, {3, 3, 1, 0, 1}, {3, 3, 1, 1, 0}, {3, 3, 2, 0, 0}, {0, 0, 3, 3, 3}, {0, 1, 2, 3, 3}, {0, 1, 3, 2, 3}, {0, 1, 3, 3, 2}, {0, 2, 1, 3, 3}, {0, 2, 2, 2, 3}, {0, 2, 2, 3, 2}, {0, 2, 3, 1, 3}, {0, 2, 3, 2, 2}, {0, 2, 3, 3, 1}, {0, 3, 0, 3, 3}, {0, 3, 1, 2, 3}, {0, 3, 1, 3, 2}, {0, 3, 2, 1, 3}, {0, 3, 2, 2, 2}, {0, 3, 2, 3, 1}, {0, 3, 3, 0, 3}, {0, 3, 3, 1, 2}, {0, 3, 3, 2, 1}, {0, 3, 3, 3, 0}, {1, 0, 2, 3, 3}, {1, 0, 3, 2, 3}, {1, 0, 3, 3, 2}, {1, 1, 1, 3, 3}, {1, 1, 2, 2, 3}, {1, 1, 2, 3, 2}, {1, 1, 3, 1, 3}, {1, 1, 3, 2, 2}, {1, 1, 3, 3, 1}, {1, 2, 0, 3, 3}, {1, 2, 1, 2, 3}, {1, 2, 1, 3, 2}, {1, 2, 2, 1, 3}, {1, 2, 2, 2, 2}, {1, 2, 2, 3, 1}, {1, 2, 3, 0, 3}, {1, 2, 3, 1, 2}, {1, 2, 3, 2, 1}, {1, 2, 3, 3, 0}, {1, 3, 0, 2, 3}, {1, 3, 0, 3, 2}, {1, 3, 1, 1, 3}, {1, 3, 1, 2, 2}, {1, 3, 1, 3, 1}, {1, 3, 2, 0, 3}, {1, 3, 2, 1, 2}, {1, 3, 2, 2, 1}, {1, 3, 2, 3, 0}, {1, 3, 3, 0, 2}, {1, 3, 3, 1, 1}, {1, 3, 3, 2, 0}, {2, 0, 1, 3, 3}, {2, 0, 2, 2, 3}, {2, 0, 2, 3, 2}, {2, 0, 3, 1, 3}, {2, 0, 3, 2, 2}, {2, 0, 3, 3, 1}, {2, 1, 0, 3, 3}, {2, 1, 1, 2, 3}, {2, 1, 1, 3, 2}, {2, 1, 2, 1, 3}, {2, 1, 2, 2, 2}, {2, 1, 2, 3, 1}, {2, 1, 3, 0, 3}, {2, 1, 3, 1, 2}, {2, 1, 3, 2, 1}, {2, 1, 3, 3, 0}, {2, 2, 0, 2, 3}, {2, 2, 0, 3, 2}, {2, 2, 1, 1, 3}, {2, 2, 1, 2, 2}, {2, 2, 1, 3, 1}, {2, 2, 2, 0, 3}, {2, 2, 2, 1, 2}, {2, 2, 2, 2, 1}, {2, 2, 2, 3, 0}, {2, 2, 3, 0, 2}, {2, 2, 3, 1, 1}, {2, 2, 3, 2, 0}, {2, 3, 0, 1, 3}, {2, 3, 0, 2, 2}, {2, 3, 0, 3, 1}, {2, 3, 1, 0, 3}, {2, 3, 1, 1, 2}, {2, 3, 1, 2, 1}, {2, 3, 1, 3, 0}, {2, 3, 2, 0, 2}, {2, 3, 2, 1, 1}, {2, 3, 2, 2, 0}, {2, 3, 3, 0, 1}, {2, 3, 3, 1, 0}, {3, 0, 0, 3, 3}, {3, 0, 1, 2, 3}, {3, 0, 1, 3, 2}, {3, 0, 2, 1, 3}, {3, 0, 2, 2, 2}, {3, 0, 2, 3, 1}, {3, 0, 3, 0, 3}, {3, 0, 3, 1, 2}, {3, 0, 3, 2, 1}, {3, 0, 3, 3, 0}, {3, 1, 0, 2, 3}, {3, 1, 0, 3, 2}, {3, 1, 1, 1, 3}, {3, 1, 1, 2, 2}, {3, 1, 1, 3, 1}, {3, 1, 2, 0, 3}, {3, 1, 2, 1, 2}, {3, 1, 2, 2, 1}, {3, 1, 2, 3, 0}, {3, 1, 3, 0, 2}, {3, 1, 3, 1, 1}, {3, 1, 3, 2, 0}, {3, 2, 0, 1, 3}, {3, 2, 0, 2, 2}, {3, 2, 0, 3, 1}, {3, 2, 1, 0, 3}, {3, 2, 1, 1, 2}, {3, 2, 1, 2, 1}, {3, 2, 1, 3, 0}, {3, 2, 2, 0, 2}, {3, 2, 2, 1, 1}, {3, 2, 2, 2, 0}, {3, 2, 3, 0, 1}, {3, 2, 3, 1, 0}, {3, 3, 0, 0, 3}, {3, 3, 0, 1, 2}, {3, 3, 0, 2, 1}, {3, 3, 0, 3, 0}, {3, 3, 1, 0, 2}, {3, 3, 1, 1, 1}, {3, 3, 1, 2, 0}, {3, 3, 2, 0, 1}, {3, 3, 2, 1, 0}, {3, 3, 3, 0, 0}, {0, 1, 3, 3, 3}, {0, 2, 2, 3, 3}, {0, 2, 3, 2, 3}, {0, 2, 3, 3, 2}, {0, 3, 1, 3, 3}, {0, 3, 2, 2, 3}, {0, 3, 2, 3, 2}, {0, 3, 3, 1, 3}, {0, 3, 3, 2, 2}, {0, 3, 3, 3, 1}, {1, 0, 3, 3, 3}, {1, 1, 2, 3, 3}, {1, 1, 3, 2, 3}, {1, 1, 3, 3, 2}, {1, 2, 1, 3, 3}, {1, 2, 2, 2, 3}, {1, 2, 2, 3, 2}, {1, 2, 3, 1, 3}, {1, 2, 3, 2, 2}, {1, 2, 3, 3, 1}, {1, 3, 0, 3, 3}, {1, 3, 1, 2, 3}, {1, 3, 1, 3, 2}, {1, 3, 2, 1, 3}, {1, 3, 2, 2, 2}, {1, 3, 2, 3, 1}, {1, 3, 3, 0, 3}, {1, 3, 3, 1, 2}, {1, 3, 3, 2, 1}, {1, 3, 3, 3, 0}, {2, 0, 2, 3, 3}, {2, 0, 3, 2, 3}, {2, 0, 3, 3, 2}, {2, 1, 1, 3, 3}, {2, 1, 2, 2, 3}, {2, 1, 2, 3, 2}, {2, 1, 3, 1, 3}, {2, 1, 3, 2, 2}, {2, 1, 3, 3, 1}, {2, 2, 0, 3, 3}, {2, 2, 1, 2, 3}, {2, 2, 1, 3, 2}, {2, 2, 2, 1, 3}, {2, 2, 2, 2, 2}, {2, 2, 2, 3, 1}, {2, 2, 3, 0, 3}, {2, 2, 3, 1, 2}, {2, 2, 3, 2, 1}, {2, 2, 3, 3, 0}, {2, 3, 0, 2, 3}, {2, 3, 0, 3, 2}, {2, 3, 1, 1, 3}, {2, 3, 1, 2, 2}, {2, 3, 1, 3, 1}, {2, 3, 2, 0, 3}, {2, 3, 2, 1, 2}, {2, 3, 2, 2, 1}, {2, 3, 2, 3, 0}, {2, 3, 3, 0, 2}, {2, 3, 3, 1, 1}, {2, 3, 3, 2, 0}, {3, 0, 1, 3, 3}, {3, 0, 2, 2, 3}, {3, 0, 2, 3, 2}, {3, 0, 3, 1, 3}, {3, 0, 3, 2, 2}, {3, 0, 3, 3, 1}, {3, 1, 0, 3, 3}, {3, 1, 1, 2, 3}, {3, 1, 1, 3, 2}, {3, 1, 2, 1, 3}, {3, 1, 2, 2, 2}, {3, 1, 2, 3, 1}, {3, 1, 3, 0, 3}, {3, 1, 3, 1, 2}, {3, 1, 3, 2, 1}, {3, 1, 3, 3, 0}, {3, 2, 0, 2, 3}, {3, 2, 0, 3, 2}, {3, 2, 1, 1, 3}, {3, 2, 1, 2, 2}, {3, 2, 1, 3, 1}, {3, 2, 2, 0, 3}, {3, 2, 2, 1, 2}, {3, 2, 2, 2, 1}, {3, 2, 2, 3, 0}, {3, 2, 3, 0, 2}, {3, 2, 3, 1, 1}, {3, 2, 3, 2, 0}, {3, 3, 0, 1, 3}, {3, 3, 0, 2, 2}, {3, 3, 0, 3, 1}, {3, 3, 1, 0, 3}, {3, 3, 1, 1, 2}, {3, 3, 1, 2, 1}, {3, 3, 1, 3, 0}, {3, 3, 2, 0, 2}, {3, 3, 2, 1, 1}, {3, 3, 2, 2, 0}, {3, 3, 3, 0, 1}, {3, 3, 3, 1, 0}, {0, 2, 3, 3, 3}, {0, 3, 2, 3, 3}, {0, 3, 3, 2, 3}, {0, 3, 3, 3, 2}, {1, 1, 3, 3, 3}, {1, 2, 2, 3, 3}, {1, 2, 3, 2, 3}, {1, 2, 3, 3, 2}, {1, 3, 1, 3, 3}, {1, 3, 2, 2, 3}, {1, 3, 2, 3, 2}, {1, 3, 3, 1, 3}, {1, 3, 3, 2, 2}, {1, 3, 3, 3, 1}, {2, 0, 3, 3, 3}, {2, 1, 2, 3, 3}, {2, 1, 3, 2, 3}, {2, 1, 3, 3, 2}, {2, 2, 1, 3, 3}, {2, 2, 2, 2, 3}, {2, 2, 2, 3, 2}, {2, 2, 3, 1, 3}, {2, 2, 3, 2, 2}, {2, 2, 3, 3, 1}, {2, 3, 0, 3, 3}, {2, 3, 1, 2, 3}, {2, 3, 1, 3, 2}, {2, 3, 2, 1, 3}, {2, 3, 2, 2, 2}, {2, 3, 2, 3, 1}, {2, 3, 3, 0, 3}, {2, 3, 3, 1, 2}, {2, 3, 3, 2, 1}, {2, 3, 3, 3, 0}, {3, 0, 2, 3, 3}, {3, 0, 3, 2, 3}, {3, 0, 3, 3, 2}, {3, 1, 1, 3, 3}, {3, 1, 2, 2, 3}, {3, 1, 2, 3, 2}, {3, 1, 3, 1, 3}, {3, 1, 3, 2, 2}, {3, 1, 3, 3, 1}, {3, 2, 0, 3, 3}, {3, 2, 1, 2, 3}, {3, 2, 1, 3, 2}, {3, 2, 2, 1, 3}, {3, 2, 2, 2, 2}, {3, 2, 2, 3, 1}, {3, 2, 3, 0, 3}, {3, 2, 3, 1, 2}, {3, 2, 3, 2, 1}, {3, 2, 3, 3, 0}, {3, 3, 0, 2, 3}, {3, 3, 0, 3, 2}, {3, 3, 1, 1, 3}, {3, 3, 1, 2, 2}, {3, 3, 1, 3, 1}, {3, 3, 2, 0, 3}, {3, 3, 2, 1, 2}, {3, 3, 2, 2, 1}, {3, 3, 2, 3, 0}, {3, 3, 3, 0, 2}, {3, 3, 3, 1, 1}, {3, 3, 3, 2, 0}, {0, 3, 3, 3, 3}, {1, 2, 3, 3, 3}, {1, 3, 2, 3, 3}, {1, 3, 3, 2, 3}, {1, 3, 3, 3, 2}, {2, 1, 3, 3, 3}, {2, 2, 2, 3, 3}, {2, 2, 3, 2, 3}, {2, 2, 3, 3, 2}, {2, 3, 1, 3, 3}, {2, 3, 2, 2, 3}, {2, 3, 2, 3, 2}, {2, 3, 3, 1, 3}, {2, 3, 3, 2, 2}, {2, 3, 3, 3, 1}, {3, 0, 3, 3, 3}, {3, 1, 2, 3, 3}, {3, 1, 3, 2, 3}, {3, 1, 3, 3, 2}, {3, 2, 1, 3, 3}, {3, 2, 2, 2, 3}, {3, 2, 2, 3, 2}, {3, 2, 3, 1, 3}, {3, 2, 3, 2, 2}, {3, 2, 3, 3, 1}, {3, 3, 0, 3, 3}, {3, 3, 1, 2, 3}, {3, 3, 1, 3, 2}, {3, 3, 2, 1, 3}, {3, 3, 2, 2, 2}, {3, 3, 2, 3, 1}, {3, 3, 3, 0, 3}, {3, 3, 3, 1, 2}, {3, 3, 3, 2, 1}, {3, 3, 3, 3, 0}, {1, 3, 3, 3, 3}, {2, 2, 3, 3, 3}, {2, 3, 2, 3, 3}, {2, 3, 3, 2, 3}, {2, 3, 3, 3, 2}, {3, 1, 3, 3, 3}, {3, 2, 2, 3, 3}, {3, 2, 3, 2, 3}, {3, 2, 3, 3, 2}, {3, 3, 1, 3, 3}, {3, 3, 2, 2, 3}, {3, 3, 2, 3, 2}, {3, 3, 3, 1, 3}, {3, 3, 3, 2, 2}, {3, 3, 3, 3, 1}, {2, 3, 3, 3, 3}, {3, 2, 3, 3, 3}, {3, 3, 2, 3, 3}, {3, 3, 3, 2, 3}, {3, 3, 3, 3, 2}, {3, 3, 3, 3, 3}}
	pool := []int{884058, 1264298, 2214898, 2595138, 6397538, 7348138, 9363410, 10123890, 10884370, 12519402, 12808074, 13529754, 13560794, 13871194, 13948794, 14771354, 15081754, 15392154, 16059514, 17704634, 17766714, 18300602, 18589274, 21475994, 22197674, 23020234, 23330634, 23641034, 24308394, 32533994, 32844394, 35513834, 37158954, 37692842, 38649068, 39009908, 39370748, 40146554, 41174754, 41213554, 41547234, 42575434, 42909114, 44677618, 44969266, 45698386, 45729746, 46043346, 46121746, 46952786, 47266386, 47579986, 48254226, 49916306, 49979026, 50518418, 50542226, 50780306, 50839826, 50907666, 50933266, 50958866, 51013906, 51692306, 51717906, 51938066, 52073746, 52117778, 52748690, 52986770, 53224850, 53736722, 54415122, 54440722, 54660882, 55339282, 55559442, 56726290, 57514930, 57544690, 57800626, 57885426, 57912946, 58642226, 58933874, 61850354, 62579474, 63410514, 63724114, 64037714, 64711954, 73022354, 73335954, 76032914, 77694994, 78234386, 78865298, 79103378, 79341458, 79853330, 80531730, 80557330, 80777490, 81455890, 81676050, 82842898, 89152018, 89390098, 91437586, 92115986, 92336146, 98170386, 98959026, 99214962, 99944242, 101876410, 102605530, 103334650, 104902258, 106979858, 107058258, 107732498, 109810098, 110484338, 114057810, 115635090, 115694610, 116206482, 116376082, 116431122, 117889682, 119466962, 119978834, 121437394, 123132970, 123228030, 123608270, 124558870, 124634918, 125395398, 125585518, 125657686, 125688726, 125766326, 125797366, 126107766, 126185366, 126349878, 126411958, 126474038, 126607510, 126896182, 127617862, 127648902, 127959302, 128036902, 128859462, 129169862, 129480262, 130147622, 131792742, 131854822, 132388710, 132424794, 132785634, 132875844, 132978664, 133017464, 133056264, 133139684, 134167884, 134206684, 134540364, 134746004, 134812740, 134885652, 134917012, 134995412, 135026772, 135340372, 135418772, 135584980, 135647700, 135710420, 135845268, 135869076, 135928596, 135931156, 135956756, 135963156, 136030996, 136056596, 136082196, 136137236, 136272916, 136278036, 136322068, 136345876, 136583956, 136643476, 136711316, 136736916, 136762516, 136817556, 137495956, 137521556, 137741716, 137877396, 137921428, 138000292, 138030052, 138059812, 138123796, 138208596, 138211796, 138239316, 138324116, 138351636, 138497492, 138789140, 139518260, 139549620, 139863220, 139941620, 140772660, 141086260, 141399860, 142074100, 143736180, 143798900, 144338292, 144362100, 144600180, 144659700, 144727540, 144753140, 144778740, 144833780, 145512180, 145537780, 145757940, 145893620, 145937652, 146568564, 146806644, 147044724, 147556596, 148234996, 148260596, 148480756, 149159156, 149379316, 150546164, 151334804, 151364564, 151620500, 151705300, 151732820, 152462100, 152535012, 153264132, 153446412, 153654172, 153732572, 153810972, 153979532, 156057132, 156135532, 156809772, 157225292, 157360140, 157517868, 157577388, 157636908, 157764876, 157934476, 157940876, 157995916, 158165516, 158220556, 158512268, 160089548, 160149068, 160660940, 160830540, 160885580, 162344140, 162541300, 162605284, 162787604, 162882664, 162958712, 163148832, 163156592, 163187632, 163265232, 163271440, 163333520, 163349040, 163421208, 163452248, 163529848, 163560888, 163871288, 163948888, 164113400, 164175480, 164237560, 164371032, 164407116, 164497326, 164501206, 164540006, 164549706, 164652526, 164691326, 164730126, 164813546, 165019186, 165026946, 165093682, 165101522, 165132882, 165211282, 165217554, 165280274, 165295954, 165301906, 165304466, 165310866, 165313426, 165339026, 165345426, 165358994, 165364114, 165369234, 165380242, 165404050, 165463570, 165466130, 165491730, 165498130, 165565970, 165591570, 165617170, 165672210, 165807890, 165813010, 165857042, 165860018, 165889778, 165897218, 165905698, 165908898, 165912098, 165918978, 166003778, 166006978, 166034498, 166051458, 166056962, 166129874, 166161234, 166239634, 166270994, 166584594, 166662994, 166829202, 166891922, 166954642, 167089490, 167113298, 167172818, 167175378, 167200978, 167207378, 167275218, 167300818, 167326418, 167381458, 167517138, 167522258, 167566290, 167590098, 167828178, 167887698, 167955538, 167981138, 168006738, 168061778, 168740178, 168765778, 168985938, 169121618, 169165650, 169244514, 169274274, 169304034, 169368018, 169452818, 169456018, 169483538, 169568338, 169595858, 169741714, 169814626, 169996906, 170004746, 170083146, 170102746, 170310506, 170388906, 170467306, 170635866, 171051386, 171067066, 171201914, 171207866, 171267386, 171282266, 171299226, 171305626, 171312026, 171325786, 171495386, 171501786, 171556826, 171590746, 171601754, 171759482, 171819002, 171878522, 172006490, 172176090, 172182490, 172237530, 172407130, 172462170, 172753882, 172951042, 172958482, 173022466, 173043666, 173050546, 173232866, 173251878, 173259638, 173265846, 173281366, 173289126, 173320166, 173397766, 173403974, 173466054, 173481574, 173490595, 173494475, 173504175, 173508055, 173546855, 173556555, 173577119, 173584879, 173592639, 173609323, 173617163, 173623435, 173639115, 173639755, 173642315, 173648715, 173649227, 173654347, 173655627, 173661579, 173664139, 173670539, 173673099, 173698699, 173705099, 173718667, 173723787, 173728907, 173739915, 173742891, 173750331, 173750651, 173753851, 173754651, 173763131, 173766331, 173769531, 173776411, 173793371, 173794011, 173799515, 173807355, 173838715, 173917115, 173923387, 173986107, 174001787, 174007739, 174010299, 174016699, 174019259, 174044859, 174051259, 174064827, 174069947, 174075067, 174086075, 174109883, 174169403, 174171963, 174197563, 174203963, 174271803, 174297403, 174323003, 174378043, 174513723, 174518843, 174562875, 174565851, 174595611, 174603051, 174611531, 174614731, 174617931, 174624811, 174709611, 174712811, 174740331, 174757291, 174762795, 174781023, 174788863, 174808463, 174816303, 174894703, 174914303, 174955855, 174971535, 174987215, 175020927, 175026879, 175041759, 175042399, 175048799, 175050399, 175067359, 175073759, 175080159, 175093919, 175127839, 175129119, 175140127, 175146079, 175205599, 175220479, 175237439, 175243839, 175250239, 175263999, 175433599, 175439999, 175495039, 175528959, 175539967, 175559683, 175567123, 175574563, 175590559, 175611759, 175612559, 175619439, 175640639, 175647519, 175683983, 175685535, 175693295, 175699503, 175715023, 175715993, 175719873, 175729573, 175730349, 175738109, 175740049, 175741617, 175742257, 175742769, 175744049, 175744689, 175747249, 175753649, 175754161, 175759281, 175760561, 175761305, 175761625, 175762425, 175762745, 175765945, 175766745, 175768441, 175769081, 175769721, 175771097, 175778937, 175785209, 175800889, 175801529, 175804089, 175810489, 175811001, 175816121, 175817401, 175823353, 175825913, 175832313, 175834873, 175860473, 175866873, 175880441, 175885561, 175890681, 175901689, 175904665, 175912105, 175912425, 175915625, 175916425, 175924905, 175928105, 175931305, 175938185, 175955145, 175955785, 175961289, 175963249, 175971089, 175990689, 175992257, 176007937, 176011857, 176013345, 176013985, 176015585, 176016225, 176022625, 176024225, 176027617, 176028897, 176030177, 176032929, 176038881, 176053761, 176054401, 176060801, 176062401, 176079361, 176085761, 176092161, 176105921, 176139841, 176141121, 176152129, 176152873, 176160313, 176162173, 176164293, 176165093, 176165893, 176167613, 176188813, 176189613, 176196493, 176200733, 176202109, 176203661, 176204631, 176205407, 176207347, 176207475, 176208115, 176208627, 176209907, 176209987, 176210307, 176211107, 176211171, 176211811, 176211971, 176213539, 176214179, 176214691, 176215971, 176216611, 176219171, 176225571, 176226083, 176231203, 176232483, 176233227, 176233547, 176234347, 176234667, 176237867, 176238667, 176240363, 176241003, 176241643, 176243019, 176244979, 176246547, 176250467, 176250627, 176251267, 176252867, 176252995, 176254275, 176254595, 176256083, 176256723, 176258323, 176258963, 176265363, 176266963, 176270355, 176271635, 176272915, 176275667, 176276411, 176278271, 176278351, 176279151, 176279351, 176281471, 176282271, 176283071, 176284791, 176289031, 176289191, 176290567, 176290761, 176290889, 176290969, 176291033, 176291193, 176291321, 176291961, 176292473, 176293753, 176293833, 176294153, 176294953, 176295017, 176295657, 176295817, 176296209, 176296369, 176296497, 176296817, 176296977, 176297617, 176299217, 176299345, 176300625, 176300945, 176301131, 176301211, 176301411, 176301491, 176302291, 176302491, 176302915, 176303075, 176303235, 176303579, 176303595, 176303723, 176303803, 176303867, 176304027, 176304059, 176304219, 176304347, 176304667, 176304687, 176304767, 176304967, 176304983, 176305143, 176305183, 176305199, 176305231, 176305251, 176305267, 176305307, 176305311}
	number := rand.Intn(176305311) + 1
	index := sort.SearchInts(pool, number)
	reel := reels[index]
	return reel
}

func evaluateReelView() {
	var times int64
	var ofAKind int

	for symbol, symbolC := range symbolView[0] {
		if config.SymbolIsWay(symbol) {
			times = int64(symbolC)
			ofAKind = 1
			for index, reels := range symbolView[1:] {
				if (reels[symbol] == 0) && (reels["Z"] == 0) {
					break
				}
				times *= int64(reels[symbol] + reels["Z"])
				ofAKind = index + 2
			}
			report.AccumulateCombinations(symbol, ofAKind, times)
		}
	}
}

func produceReport() {
	for _, symbol := range config.Symbols() {
		var payTable = config.SymbolPays(symbol)
		for count, pay := range payTable {
			var c = report.GetCombinations(symbol, count+1)
			report.AccumulatePays(symbol, count+1, int64(c)*int64(pay))
		}
	}

	fmt.Println(symbolView)
	report.PrintTotals()
	fmt.Println("Combinations")
	report.PrintCombinations()
	fmt.Println("Pays")
	report.PrintPays()
}

func Init(game string) {
	gameConfig, err := slotgame.ConfigLoader(game)
	if err != nil {
		log.Fatal("Error when loading config: ", err)
	}

	config = slotgame.GetConfig(gameConfig)

	reels = config.Reels()

	report = slotgame.InitReport(config.Symbols(), config.Reels())

	indexes = make([]int, config.Reels())
	loopTo = make([]int, config.Reels())
	endOfSequence = false
}

func SequenceTest(reelSetName string) {
	var scatters int

	reelSet = config.ReelSet(reelSetName)
	for x, y := range reelSet {
		loopTo[x] = len(y)
	}

	for hasNextSequence() {
		symbolView = setNextReelView(reelSetName)

		report.AccumulateTotal("count", 1)

		scatters = 0
		for _, symbols := range symbolView {
			scatters += symbols["S"]
		}
		report.AccumulateCombinations("S", scatters, 1)

		evaluateReelView()
	}

	produceReport()
}

// RandomTest performs testSpins spins of a slot game
func RandomTest(reelSetName string, testSpins uint32) {
	var spin uint32
	var scatters int

	reelSet = config.ReelSet(reelSetName)
	for x, y := range reelSet {
		loopTo[x] = len(y)
	}

	for spin = 0; spin < testSpins; spin += 1 {
		symbolView = setRandomReelView(reelSetName)

		report.AccumulateTotal("count", 1)

		scatters = 0
		for _, symbols := range symbolView {
			scatters += symbols["S"]
		}
		report.AccumulateCombinations("S", scatters, 1)

		evaluateReelView()
	}

	produceReport()
}

// RandomTest performs testSpins spins of a slot game
func BonsaiTest(reelSetName string, testSpins uint32) {
	var spin uint32

	reelSet = config.ReelSet(reelSetName)
	for x, y := range reelSet {
		loopTo[x] = len(y)
	}

	for spin = 0; spin < testSpins; spin += 1 {
		for x := 0; x < len(bonsaiOverlay); x += 1 {
			for y := 0; y < len(bonsaiOverlay[x]); y += 1 {
				bonsaiOverlay[x][y] = 0
			}
		}
	
		bonsaiTrigger := weightedDraw()
	
		for tx, t := range bonsaiTrigger {
			for ti := 0; ti < t; ti += 1 {
				bonsaiOverlay[tx][ti] = 1
			}
		}
	
		fmt.Println(bonsaiTrigger)
		fmt.Println(bonsaiOverlay)
	
		report.AccumulateTotal("count", 1)

		for free := 0; free < 6; free += 1 {
			symbolView = setBonsaiReelView(reelSetName)
			evaluateReelView()
		}
	}

	produceReport()
}
